addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(),popup = city)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city)
MUNICIPIOS %>%
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city)
addLayersControl(
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city)) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city)) %>%
setView(lng= -4.055685,lat=41.294856, zoom = 4)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv")
View(MUNICIPIOS)
View(MUNICIPIOS)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv")
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
str(MUNICIPIOS)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~as.numeric(long), lat = ~as.numeric(lat), weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
str(MUNICIPIOS)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
MUNICIPIOS$lat <- as.numeric(MUNICIPIOS$lat)
MUNICIPIOS$long <- as.numeric(MUNICIPIOS$long)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lat, lat = ~long, weight = 1,radius = ~sqrt(pop) * 30, label = ~as.character(city))
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lat, lat = ~long, weight = 1,radius = ~sqrt(pop) * 30,icon=icons, label = ~as.character(city))
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(leaflet)
library(dplyr)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
getColor <- function(MUNICIPIOS) {
sapply(MUNICIPIOS$pop, function(pop) {
if(pop <= 1000) {
"green"
} else if(pop >= 1000 && pop <= 10000) {
"orange"
} else if(pop >= 10000 && pop <= 50000) {
"red"
} else
"blue"
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(leaflet)
library(dplyr)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
getColor <- function(MUNICIPIOS) {
sapply(MUNICIPIOS$pop, function(pop) {
if(pop <= 1000) {
"green"
} else if(pop >= 1000 && pop <= 10000) {
"orange"
} else if(pop >= 10000 && pop <= 50000) {
"red"
} else
"blue"
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(MUNICIPIOS)
)
MUNICIPIOS$lat <- as.numeric(MUNICIPIOS$lat)
MUNICIPIOS$long <- as.numeric(MUNICIPIOS$long)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addCircles(lng = ~lat, lat = ~long, weight = 1,radius = ~sqrt(pop) * 30,icon=icons, label = ~as.character(city))
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(leaflet)
library(dplyr)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
getColor <- function(MUNICIPIOS) {
sapply(MUNICIPIOS$pop, function(pop) {
if(pop <= 1000) {
"green"
} else if(pop >= 1000 && pop <= 10000) {
"orange"
} else if(pop >= 10000 && pop <= 50000) {
"red"
} else
"blue"
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(MUNICIPIOS)
)
MUNICIPIOS$lat <- as.numeric(MUNICIPIOS$lat)
MUNICIPIOS$long <- as.numeric(MUNICIPIOS$long)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~lat, lat = ~long, weight = 1,radius = ~sqrt(pop) * 30,icon=icons, label = ~as.character(city))
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(leaflet)
library(dplyr)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
getColor <- function(MUNICIPIOS) {
sapply(MUNICIPIOS$pop, function(pop) {
if(pop <= 1000) {
"green"
} else if(pop >= 1000 && pop <= 10000) {
"orange"
} else if(pop >= 10000 && pop <= 50000) {
"red"
} else
"blue"
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(MUNICIPIOS)
)
MUNICIPIOS$lat <- as.numeric(MUNICIPIOS$lat)
MUNICIPIOS$long <- as.numeric(MUNICIPIOS$long)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~lat, lat = ~long, weight = 1,icon=icons, label = ~as.character(city))
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(leaflet)
library(dplyr)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
getColor <- function(MUNICIPIOS) {
sapply(MUNICIPIOS$pop, function(pop) {
if(pop <= 1000) {
"green"
} else if(pop >= 1000 && pop <= 10000) {
"orange"
} else if(pop >= 10000 && pop <= 50000) {
"red"
} else
"blue"
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(MUNICIPIOS)
)
MUNICIPIOS$lat <- as.numeric(MUNICIPIOS$lat)
MUNICIPIOS$long <- as.numeric(MUNICIPIOS$long)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addAwesomeMarkers(lng = ~lat, lat = ~long,icon=icons, label = ~as.character(city))
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(leaflet)
library(dplyr)
MUNICIPIOS <- read.csv2("D:/MUNICIPIOS.csv",stringsAsFactors = FALSE)
MUNICIPIOS$lat <- as.numeric(MUNICIPIOS$lat)
MUNICIPIOS$long <- as.numeric(MUNICIPIOS$long)
MUNICIPIOS %>%
leaflet() %>%
addTiles() %>%
addMarkers(
clusterOptions = markerClusterOptions()
)
install.packages('plotly')
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
knitr::opts_chunk$set(echo = FALSE)
AAPL <- getSymbols("AAPL",auto.assign = FALSE, from = "1980-01-01",src="google")
install.packages('quantmod')
library(quantmod)
AAPL <- getSymbols("AAPL",auto.assign = FALSE, from = "1980-01-01",src="google")
library(quantmod)
AAPL <- getSymbols("AAPL",auto.assign = FALSE, from = "1980-01-01",src="yahoo")
IBM <- getSymbols("IBM",auto.assign = FALSE, from = "1980-01-01",src="yahoo")
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(quantmod)
AAPL <- na.omit(getSymbols("AAPL",auto.assign = FALSE, from = "1980-01-01",src="yahoo"))
IBM <- na.omit(getSymbols("IBM",auto.assign = FALSE, from = "1980-01-01",src="yahoo"))
library(plotly)
mat <-  data.frame(Date = AAPL$Date,
AAPL = round(AAPL$Adj.Close,2),
IBM = round(IBM$Adj.Close,2))
View(AAPL)
View(AAPL)
mat <-  data.frame(Date = AAPL$Date,
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
View(AAPL)
View(IBM)
AAPL <- na.omit(getSymbols("AAPL",auto.assign = FALSE, from = "2017-01-01",to="2017-12-31",src="yahoo"))
IBM <- na.omit(getSymbols("IBM",auto.assign = FALSE, from = "2017-01-01",to="2017-12-31",src="yahoo"))
library(plotly)
mat <-  data.frame(Date = AAPL$Date,
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
mat <-  data.frame(Date = AAPL$Date,
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
View(AAPL)
View(AAPL)
View(IBM)
View(IBM)
View(AAPL)
mat <-  data.frame(Date = index(AAPL),
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
p <- mat %>%
plot_ly(x = Date, y = AAPL, fill = "tozeroy", name = "Microsoft") %>%
add_trace(y = IBM, fill = "tonexty", name = "IBM") %>%
layout(title = "Stock Prices",
xaxis = list(title = "Time"),
yaxis = list(title = "Stock Prices"))
View(mat)
View(mat)
View(mat)
mat <-  data.frame(Date = as.date(index(AAPL)),
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
mat <-  data.frame(DateCol = index(AAPL),
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
p <- mat %>%
plot_ly(x = DateCol, y = AAPL, fill = "tozeroy", name = "Microsoft") %>%
add_trace(y = IBM, fill = "tonexty", name = "IBM") %>%
layout(title = "Stock Prices",
xaxis = list(title = "Time"),
yaxis = list(title = "Stock Prices"))
AAPL <- getYahooData("AAPL")
APL <- getYahooData("AAPL")
View(mat)
View(mat)
mat <-  data.frame(DateCol = as.Date(index(AAPL) , "%m/%d/%y"),
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
View(mat)
p <- mat %>%
plot_ly(x = DateCol, y = AAPL, fill = "tozeroy", name = "Microsoft") %>%
add_trace(y = IBM, fill = "tonexty", name = "IBM") %>%
layout(title = "Stock Prices",
xaxis = list(title = "Time"),
yaxis = list(title = "Stock Prices"))
mat$DateCol
mat <-  data.frame(DateCol = index(AAPL),
AAPL = round(AAPL$AAPL.Close,2),
IBM = round(IBM$IBM.Close,2))
View(mat)
str(mat)
?plotly
p <- mat %>%
plot_ly(x = DateCol, y = AAPL, fill = "tozeroy", name = "Microsoft") %>%
add_trace(y = IBM, fill = "tonexty", name = "IBM") %>%
layout(title = "Stock Prices",
xaxis = list(title = "Time"),
yaxis = list(title = "Stock Prices"))
library(datasets)
data(iris)
library(plotly)
p <- plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width,color = ~Species, mode = "markers")
p
shiny::runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
trips <- readRDS("C:/Users/Laro Navamuel/Downloads/trips.rds")
View(trips)
View(trips)
shapes <- readRDS("C:/Users/Laro Navamuel/Downloads/shapes.rds")
View(shapes)
View(shapes)
shiny::runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
install.packages("webshot")
# Chunk 1: downloading data
library(datasets)
data(iris)
# Chunk 2: plotly
library(plotly)
p <- plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width,color = ~Species, mode = "markers")
p
# Chunk 1: plotly
Sys.setenv("plotly_username"="padawone")
Sys.setenv("plotly_api_key"="u9fzlci7b6")
library(plotly)
dataset(mtcars)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
chart_link = api_create(p, filename="scatter3d-basic")
chart_link
# Chunk 1: plotly
Sys.setenv("plotly_username"="padawone")
Sys.setenv("plotly_api_key"="szjcyC89yv4ZPLc3Ukby")
library(plotly)
dataset(mtcars)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
chart_link = api_create(p, filename="scatter3d-basic")
chart_link
knitr::opts_chunk$set(echo = FALSE,warning=FALSE)
library(datasets)
data(mtcars)
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
knitr::opts_chunk$set(echo = FALSE)
suppressPackageStartupMessages({library(plotly)})
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
shiny::runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
# load libraries
library(dplyr)
library(tidyr)
# Read data
Cant_Patrimonio <- read.csv("../DataFiles/Patrimonio_Cantabria.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio_Cantabria.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
View(Cant_Patrimonio)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio_Cantabria.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
View(Cant_Patrimonio)
View(Cant_Patrimonio)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio_Cantabria.csv", sep=";",header=TRUE,stringsAsFactors = FALSE)
View(Cant_Patrimonio)
View(Cant_Patrimonio)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
View(Cant_Patrimonio)
#Get the number of observations and the number of columns of the file
nb_obs <- dim(Cant_Patrimonio)[1]
nb_col <- dim(Cant_Patrimonio)[2]
# remove empty columns
check_NA <- apply(Cant_Patrimonio,2,function(x) sum(is.na(x)))
cols_to_remove <- which(check_NA == nb_obs)
clean_Cant_Patrimonio <- select(Cant_Patrimonio,-cols_to_remove)
View(clean_Cant_Patrimonio)
col_names <- names(Cant_Patrimonio)
new_col_names <- gsub("è","e",gsub("é","e",gsub(".","_",gsub("...","_",col_names,fixed=TRUE),fixed=TRUE),fixed=TRUE),fixed=TRUE)
Encoding(new_col_names) <- "UTF-8"
colnames(Cant_Patrimonio) <- new_col_names
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
col_names <- names(Cant_Patrimonio)
View(Cant_Patrimonio)
View(Cant_Patrimonio)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
col_names <- names(Cant_Patrimonio)
Cant_Patrimonio <- Cant_Patrimonio %>%
unlist(strsplit(Localizacion, " "))
unlist(strsplit(Cant_Patrimonio$Localizacion, " "))
unlist(strsplit(Cant_Patrimonio$Localizacion, "[ ]"))
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(stringr)
str_split_fixed(Cant_Patrimonio$Localizacion, " ", 2)
str_split_fixed(Cant_Patrimonio$Localizacion, "", 2)
str_split_fixed(Cant_Patrimonio$Localizacion, " ", 10)
str_split_fixed(Cant_Patrimonio$Localizacion, " ", 2)
str_split_fixed(Cant_Patrimonio$Localizacion," ", 2)
str_split_fixed(Cant_Patrimonio$Localizacion,"º", 2)
str_split_fixed(Cant_Patrimonio$Localizacion,"º",1)
View(Cant_Patrimonio)
View(Cant_Patrimonio)
Cant_Patrimonio$Localizacion
Left(Cant_Patrimonio$Localizacion,10)
strsplit(Cant_Patrimonio$Localizacion),"N")
strsplit(Cant_Patrimonio$Localizacion,"N")
Cant_Patrimonio %>%
Cant_Patrimonio$Grados_Lat %>% strsplit(Cant_Patrimonio$Localizacion[[1]],"N")
Cant_Patrimonio$Grados_Lat %>% strsplit(Cant_Patrimonio$Localizacion,"N")
Cant_Patrimonio %>%
Cant_Patrimonio$Grados_Lat %>% strsplit(Cant_Patrimonio$Localizacion,"N")
Cant_Patrimonio %>%
Cant_Patrimonio$Grados_Lat %>% strsplit(Localizacion,"N")
Cant_Patrimonio$Grados_Lat %>% strsplit(Cant_Patrimonio$Localizacion,"N")
Cant_Patrimonio$Grados_Lat <- strsplit(Cant_Patrimonio$Localizacion,"N")
View(Cant_Patrimonio)
View(Cant_Patrimonio)
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
View(Cant_Patrimonio)
Cant_Patrimonio$Grados_Lat <- strsplit(Cant_Patrimonio$Localizacion,"N")[[1]]
Cant_Patrimonio <- read.csv("../PRACTICAS/Developing Data Products - Week 4 Assignment/DataFiles/Patrimonio.csv", encoding="UTF-8", sep=";",header=TRUE,stringsAsFactors = FALSE)
Cant_Patrimonio$Grados_Lat <- strsplit(Cant_Patrimonio$Localizacion,"N")[[1]]
#Our coordinates are in Grades Minutes and Seconds, is needed to transform into decimal grades, but first
#separate data into latitud and longitude.
Cant_Patrimonio$Grados_Lat <- strsplit(Cant_Patrimonio$Localizacion,"N")[1]
Cant_Patrimonio$Grados_Lat <- matrix(unlist(strsplit(Cant_Patrimonio$Localizacion, "N")), ncol=2, byrow=TRUE)
matrix(unlist(strsplit(Cant_Patrimonio$Localizacion, "N")), ncol=2, byrow=TRUE)
matrix(unlist(strsplit(Cant_Patrimonio$Localizacion, " ")), ncol=2, byrow=TRUE)
matrix(unlist(str_sub(Cant_Patrimonio$Localizacion,start=-10)), ncol=2, byrow=TRUE)
matrix(unlist(str_sub(Cant_Patrimonio$Localizacion,start=-10)), ncol=1, byrow=TRUE)
Cant_Patrimonio$Grados_Lat <- matrix(unlist(str_sub(Cant_Patrimonio$Localizacion,start=1,end = 10)), ncol=1, byrow=TRUE)
Cant_Patrimonio$Grados_Long <- matrix(unlist(str_sub(Cant_Patrimonio$Localizacion,start=-10)), ncol=1, byrow=TRUE)
View(Cant_Patrimonio)
View(Cant_Patrimonio)
Cant_Patrimonio$Latitud <- substr(Cant_Patrimonio$Grados_Lat,"º") + (substr(Cant_Patrimonio$Grados_Lat,"'")/60) +(substr(Cant_Patrimonio$Grados_Lat,"″O")/3600)
View(Cant_Patrimonio)
Cant_Patrimonio$Grados_Lat <- matrix(unlist(str_sub(Cant_Patrimonio$Localizacion,start=1,end = 10)), ncol=1, byrow=TRUE)
Cant_Patrimonio$Grados_Long <- matrix(unlist(str_sub(Cant_Patrimonio$Localizacion,start=-10)), ncol=1, byrow=TRUE)
#(23° 08' 06'' N) = (23 + (08 / 60) + (06 / 3600)) = 23.134999
Cant_Patrimonio$Latitud <- substr(Cant_Patrimonio$Grados_Lat,"º") + (substr(Cant_Patrimonio$Grados_Lat,"'")/60) +(substr(Cant_Patrimonio$Grados_Lat,"″O")/3600)
Cant_Patrimonio$Latitud <- substr(Cant_Patrimonio$Grados_Lat,"º")[[1]] + (substr(Cant_Patrimonio$Grados_Lat,"'")/60)[[1]] +(substr(Cant_Patrimonio$Grados_Lat,"″O")/3600)[[1]]
View(Cant_Patrimonio)
Cant_Patrimonio$Latitud <- substr(Cant_Patrimonio$Grados_Lat,"º")[[1]] + (substr(Cant_Patrimonio$Grados_Lat,"'")/60)[[1]] +(substr(Cant_Patrimonio$Grados_Lat,"″O")/3600)[[1]]
shiny::runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
View(Cant_Patrimonio)
View(Cant_Patrimonio)
View(clean_Cant_Patrimonio)
View(clean_Cant_Patrimonio)
runApp('Developing Data Products - Week 4 Assignment/ShinyApp')
View(clean_Cant_Patrimonio)
View(clean_Cant_Patrimonio)
setwd("D:/FORMACION/Data Science Specialization - Josh Hopkins University/PRACTICAS/Developing Data Products - Week 4 Assignment/ShinyApp")
runApp()
runApp()
runApp()
